package data.database;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.HashMap;

/**
 *
 * @author Daniel Plaza
 */
public class DatabaseHelper extends DatabaseModel {

    private final SimpleDateFormat DATE_FORMAT;

    public DatabaseHelper(String path, String name, String user, String password) {
        super(path, name, user, password);
        this.DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");

        File f = new File(DATABASE_PATH);
        if (!f.exists()) {
            f.mkdir();
        }
        boolean databaseExists = false;
        f = new File(DATABASE_PATH + File.separator + DATABASE_NAME + ".script");
        if (f.exists()) {
            databaseExists = true;
        }
        try {
            Class.forName("org.hsqldb.jdbcDriver");
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        if (!databaseExists) {
            createDatabase();
        }
    }

    private void createDatabase() {
        Connection connection = null;
        Statement st = null;
        try {
            connection = getConnection();

            connection.setAutoCommit(false); //transaction block starts

            st = connection.createStatement();

            String update;

            update = "CREATE TABLE  " + TABLE_ACCOUNT_TAX + " (\n"
                    + KEY_ID + " int GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) primary key,\n"
                    + KEY_NAME + " varchar(50),\n"
                    + KEY_AMOUNT + " DECIMAL(10,2)\n"
                    + ")";
            st.executeUpdate(update);
            System.out.println(update + ";");

            update = "CREATE TABLE  " + TABLE_INVOICE + " (\n"
                    + KEY_ID + " int GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) primary key,\n"
                    + KEY_NAME + " varchar(50),\n"
                    + KEY_DATE + " date,\n"
                    + KEY_AMOUNT_TOTAL + " DECIMAL(10,2),\n"
                    + KEY_AMOUNT_TAX + " DECIMAL(10,2),\n"
                    + KEY_AMOUNT_UNTAXED + " DECIMAL(10,2)\n"
                    + ")";
            st.executeUpdate(update);
            System.out.println(update + ";");

            update = "CREATE TABLE " + TABLE_PRODUCT_CATEGORY + " (\n"
                    + KEY_ID + " int GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) primary key,\n"
                    + KEY_NAME + " varchar(50)\n"
                    + ")";
            st.executeUpdate(update);
            System.out.println(update + ";");

            update = "CREATE TABLE  " + TABLE_PRODUCT_PRODUCT + " (\n"
                    + KEY_ID + " int GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) primary key,\n"
                    + KEY_NAME + " varchar(50),\n"
                    + KEY_DESCRIPTION + " varchar(200),\n"
                    + KEY_PRICE_UNIT + " DECIMAL(10,2),\n"
                    + KEY_QTY_AVAILABLE + " DECIMAL(10,2),\n"
                    + KEY_ACTIVE + " boolean,\n"
                    + KEY_TAX_ID + " int,\n"
                    + KEY_CATEG_ID + " int,\n"
                    + "FOREIGN KEY(" + KEY_TAX_ID + ") REFERENCES PUBLIC." + TABLE_ACCOUNT_TAX + "(" + KEY_ID + ") ON DELETE CASCADE,\n"
                    + "FOREIGN KEY(" + KEY_CATEG_ID + ") REFERENCES PUBLIC." + TABLE_PRODUCT_CATEGORY + "(" + KEY_ID + ") ON DELETE CASCADE\n"
                    + ")";
            st.executeUpdate(update);
            System.out.println(update + ";");

            update = "CREATE TABLE " + TABLE_INVOICE_LINE + " (\n"
                    + KEY_ID + " int GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) primary key,\n"
                    + KEY_PRODUCT_QTY + " DECIMAL(10,2),\n"
                    + KEY_INVOICE_ID + " int,\n"
                    + KEY_PRODUCT_ID + " int,\n"
                    + KEY_PRICE_UNIT + " DECIMAL(10,2),\n"
                    + KEY_TAX_ID + " int,\n"
                    + "FOREIGN KEY(" + KEY_PRODUCT_ID + ") REFERENCES PUBLIC." + TABLE_PRODUCT_PRODUCT + "(" + KEY_ID + ") ON DELETE CASCADE,\n"
                    + "FOREIGN KEY(" + KEY_INVOICE_ID + ") REFERENCES PUBLIC." + TABLE_INVOICE + "(" + KEY_ID + ") ON DELETE CASCADE,\n"
                    + "FOREIGN KEY(" + KEY_TAX_ID + ") REFERENCES PUBLIC." + TABLE_ACCOUNT_TAX + "(" + KEY_ID + ") ON DELETE CASCADE\n"
                    + ")";
            st.executeUpdate(update);
            System.out.println(update + ";");

            insertOrUpdateIntoAccountTax(new AccountTax(0, "IVA 4%", 0.04));
            insertOrUpdateIntoAccountTax(new AccountTax(1, "IVA 10%", 0.1));
            insertOrUpdateIntoAccountTax(new AccountTax(2, "IVA 21%", 0.21));

            connection.commit();//transaction block ends

        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Override
    public boolean insertOrUpdateIntoAccountTax(AccountTax accountTax) {
        String insert = "insert into " + TABLE_ACCOUNT_TAX + " (" + KEY_ID + "," + KEY_NAME + "," + KEY_AMOUNT + ") values (" + accountTax.getId() + ",'" + accountTax.getName() + "'," + accountTax.getAmount() + ")";
        String update = "update " + TABLE_ACCOUNT_TAX + " set " + KEY_NAME + "='" + accountTax.getName() + "'," + KEY_AMOUNT + "=" + accountTax.getAmount() + " where " + KEY_ID + "=" + accountTax.getId();
        return insertOrUpdate(insert, update);
    }

    @Override
    public boolean insertOrUpdateIntoProductCategory(ProductCategory productCategory) {
        String insert = "insert into " + TABLE_PRODUCT_CATEGORY + " (" + KEY_ID + "," + KEY_NAME + ") values (" + productCategory.getId() + ",'" + productCategory.getName() + "')";
        String update = "update " + TABLE_PRODUCT_PRODUCT + " set " + KEY_NAME + "='" + productCategory.getName() + "' where " + KEY_ID + "=" + productCategory.getId();
        return insertOrUpdate(insert, update);
    }

    @Override
    public boolean insertOrUpdateIntoProductProduct(ProductProduct productProduct) {
        String insert = "insert into " + TABLE_PRODUCT_PRODUCT + " (" + KEY_ID + "," + KEY_NAME + "," + KEY_DESCRIPTION + "," + KEY_ACTIVE + "," + KEY_TAX_ID + "," + KEY_CATEG_ID + "," + KEY_QTY_AVAILABLE + "," + KEY_PRICE_UNIT + ") values (" + productProduct.getId() + ",'" + productProduct.getName() + "','" + productProduct.getDescription() + "'," + productProduct.isActive() + "," + productProduct.getTaxId() + "," + productProduct.getCategId() + "," + productProduct.getQtyAvailable() + "," + productProduct.getPriceUnit() + ")";
        String update = "update " + TABLE_PRODUCT_PRODUCT + " set " + KEY_NAME + "='" + productProduct.getName() + "'," + KEY_DESCRIPTION + "='" + productProduct.getDescription() + "'," + KEY_ACTIVE + "=" + productProduct.isActive() + "," + KEY_TAX_ID + "=" + productProduct.getTaxId() + "," + KEY_CATEG_ID + "=" + productProduct.getCategId() + "," + KEY_QTY_AVAILABLE + "=" + productProduct.getQtyAvailable() + "," + KEY_PRICE_UNIT + "=" + productProduct.getPriceUnit() + " where " + KEY_ID + "=" + productProduct.getId();
        return insertOrUpdate(insert, update);
    }

    @Override
    public boolean insertOrUpdateIntoInvoiceLine(InvoiceLine invoiceLine) {
        String insert = "insert into " + TABLE_INVOICE_LINE + " (" + KEY_ID + "," + KEY_INVOICE_ID + "," + KEY_PRODUCT_ID + "," + KEY_PRODUCT_QTY + "," + KEY_PRICE_UNIT + "," + KEY_TAX_ID + ") values (" + invoiceLine.getId() + "," + invoiceLine.getInvoiceId() + "," + invoiceLine.getProductId() + "," + invoiceLine.getProductQty() + "," + invoiceLine.getPriceUnit() + "," + invoiceLine.getTaxId() + ")";
        String update = "update " + TABLE_INVOICE_LINE + " set " + KEY_INVOICE_ID + "=" + invoiceLine.getInvoiceId() + "," + KEY_PRODUCT_ID + "=" + invoiceLine.getProductId() + "," + KEY_PRODUCT_QTY + "=" + invoiceLine.getProductQty() + "," + KEY_PRICE_UNIT + "=" + invoiceLine.getPriceUnit() + "," + KEY_TAX_ID + "=" + invoiceLine.getTaxId() + " where " + KEY_ID + "=" + invoiceLine.getId();
        return insertOrUpdate(insert, update);
    }

    @Override
    public boolean insertOrUpdateIntoInvoice(Invoice invoice) {
        String insert = "insert into " + TABLE_INVOICE + " (" + KEY_ID + "," + KEY_NAME + "," + KEY_DATE + "," + KEY_AMOUNT_TOTAL + "," + KEY_AMOUNT_TAX + "," + KEY_AMOUNT_UNTAXED + ") values (" + invoice.getId() + ",'" + invoice.getName() + "','" + DATE_FORMAT.format(invoice.getDate()) + "'," + invoice.getAmountTotal() + "," + invoice.getAmountTax() + "," + invoice.getAmountUntaxed() + ")";
        String update = "update " + TABLE_INVOICE + " set " + KEY_NAME + "=" + invoice.getName() + "," + KEY_DATE + "='" + DATE_FORMAT.format(invoice.getDate()) + "'," + KEY_AMOUNT_TOTAL + "=" + invoice.getAmountTotal() + "," + KEY_AMOUNT_TAX + "=" + invoice.getAmountTax() + "," + KEY_AMOUNT_UNTAXED + "=" + invoice.getAmountUntaxed() + " where " + KEY_ID + "=" + invoice.getId();
        return insertOrUpdate(insert, update);
    }

    private boolean insertOrUpdate(String insert, String update) {
        Connection connection = null;
        Statement st = null;
        boolean updated = false;
        try {
            connection = getConnection();
            st = connection.createStatement();
            st.executeUpdate(insert);
            System.out.println(insert + ";");
            updated = true;
        } catch (SQLIntegrityConstraintViolationException ex) {
            try {
                st.executeUpdate(update);
                System.out.println(update + ";");
                updated = true;
            } catch (SQLException ex1) {
                ex1.printStackTrace();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return updated;
    }

    private ResultSet selectQuery(String query) {
        Connection connection = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            connection = getConnection();
            st = connection.createStatement();
            rs = st.executeQuery(query);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return rs;
    }

    @Override
    protected Connection getConnection() {
        Connection connection = null;
        try {
            connection = DriverManager.getConnection("jdbc:hsqldb:file:" + DATABASE_PATH + File.separator + DATABASE_NAME, DATABASE_USER, DATABASE_PASSWORD);
            return connection;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return connection;
    }

    @Override
    public HashMap<Integer, AccountTax> getAccountTax() {
        HashMap<Integer, AccountTax> list = new HashMap<>();
        String query = "select * from " + TABLE_ACCOUNT_TAX;
        ResultSet rs = selectQuery(query);
        try {
            while (rs.next()) {
                list.put(rs.getInt(KEY_ID), new AccountTax(rs.getInt(KEY_ID), rs.getString(KEY_NAME), rs.getDouble(KEY_AMOUNT)));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    @Override
    public HashMap<Integer, ProductProduct> getProductProduct() {
        HashMap<Integer, ProductProduct> list = new HashMap<>();
        String query = "select * from " + TABLE_PRODUCT_PRODUCT;
        ResultSet rs = selectQuery(query);
        try {
            while (rs.next()) {
                list.put(rs.getInt(KEY_ID), new ProductProduct(rs.getInt(KEY_ID), rs.getString(KEY_NAME), rs.getString(KEY_DESCRIPTION), rs.getBoolean(KEY_ACTIVE), rs.getInt(KEY_TAX_ID), rs.getInt(KEY_CATEG_ID), rs.getDouble(KEY_QTY_AVAILABLE), rs.getDouble(KEY_PRICE_UNIT)));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    @Override
    public HashMap<Integer, ProductCategory> getProductCategory() {
        HashMap<Integer, ProductCategory> list = new HashMap<>();
        String query = "select * from " + TABLE_PRODUCT_CATEGORY;
        ResultSet rs = selectQuery(query);
        try {
            while (rs.next()) {
                list.put(rs.getInt(KEY_ID), new ProductCategory(rs.getInt(KEY_ID), rs.getString(KEY_NAME)));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    @Override
    public HashMap<Integer, InvoiceLine> getInvoiceLine() {
        HashMap<Integer, InvoiceLine> list = new HashMap<>();
        String query = "select * from " + TABLE_INVOICE_LINE;
        ResultSet rs = selectQuery(query);
        try {
            while (rs.next()) {
                list.put(rs.getInt(KEY_ID), new InvoiceLine(rs.getInt(KEY_ID), rs.getInt(KEY_INVOICE_ID), rs.getInt(KEY_PRODUCT_ID), rs.getDouble(KEY_PRODUCT_QTY), rs.getDouble(KEY_PRICE_UNIT), rs.getInt(KEY_TAX_ID)));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    @Override
    public HashMap<Integer, Invoice> getInvoice() {
        HashMap<Integer, Invoice> list = new HashMap<>();
        String query = "select * from " + TABLE_INVOICE;
        ResultSet rs = selectQuery(query);
        try {
            while (rs.next()) {
                list.put(rs.getInt(KEY_ID), new Invoice(rs.getInt(KEY_ID), rs.getString(KEY_NAME), rs.getDate(KEY_DATE), rs.getDouble(KEY_AMOUNT_TOTAL), rs.getDouble(KEY_AMOUNT_TAX), rs.getDouble(KEY_AMOUNT_UNTAXED)));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    private boolean deleteUpdate(String table, int id) {
        Connection connection = null;
        Statement st = null;
        boolean deleted = false;
        try {
            connection = getConnection();
            st = connection.createStatement();
            String delete = "delete from " + table + " where " + KEY_ID + "=" + id;
            st.executeUpdate(delete);
            System.out.println(delete + ";");
            deleted = true;
        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return deleted;
    }

    @Override
    public boolean deleteFromAccountTax(AccountTax accountTax) {
        return deleteUpdate(TABLE_ACCOUNT_TAX, accountTax.getId());
    }

    @Override
    public boolean deleteFromProductCategory(ProductCategory productCategory) {
        return deleteUpdate(TABLE_PRODUCT_CATEGORY, productCategory.getId());
    }

    @Override
    public boolean deleteFromProductProduct(ProductProduct productProduct) {
        return deleteUpdate(TABLE_PRODUCT_PRODUCT, productProduct.getId());
    }

    @Override
    public boolean deleteFromInvoiceLine(InvoiceLine invoiceLine) {
        return deleteUpdate(TABLE_INVOICE_LINE, invoiceLine.getId());
    }

    @Override
    public boolean deleteFromInvoice(Invoice invoice) {
        return deleteUpdate(TABLE_INVOICE, invoice.getId());
    }

}
